//
//  LIAppUtils.m
//  LIGHTinvesting
//
//  Created by Deng on 15/6/30.
//  Copyright (c) 2015年 Hundsun. All rights reserved.
//

#import "LIAppUtils.h"
#import "MBProgressHUD.h"
#import "UIImageView+WebCache.h"
#import "UIButton+WebCache.h"
#import "LIAppMacro.h"

#define MBTAG  100001

@implementation LIAppUtils

// 获取颜色
+ (UIColor *)colorFromRGB:(NSInteger)rgbValue {
    return [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0];
}

+ (UIColor *)colorFromRGB:(NSInteger)rgbValue theAlpha:(CGFloat)alpha {
    if (alpha > 1) {
        alpha = 1.0f;
    }else if (alpha < 0) {
        alpha = 0;
    }
    
    return [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 green:((float)((rgbValue & 0xFF00) >> 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:alpha];
}

//字体
+ (UIFont *)helveticaFont:(CGFloat)fontSize {
//    return [UIFont fontWithName:@"HelveticaNeue-thin" size:fontSize];
    return [UIFont fontWithName:@"Helvetica" size:fontSize];
}

+ (UIFont *)helveticaBoldFont:(CGFloat)fontSize{
    return [UIFont fontWithName:@"Helvetica-Bold" size:fontSize];
}

// 判断是否为空
+ (BOOL)judgeStrIsEmpty:(NSString *)str {
    if (str == nil) {
        return YES;
    }
    if (str == NULL) {
        return YES;
    }
    if ([str isKindOfClass:[NSNull class]]) {
        return YES;
    }
    if (![str isKindOfClass:[NSString class]]) {
        str = [NSString stringWithFormat:@"%@", str];
    }
    if ([[str stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length]==0) {
        return YES;
    }
    
    return NO;
}

+ (NSString *)filterNull:(NSString *)str{
    if (![str isKindOfClass:[NSString class]]) {
        str = [NSString stringWithFormat:@"%@", str];
    }

    if (str == nil || [str isEqual:[NSNull null]]) {
        return @"";
    }
    
    return str;
}

// 字符串判断
+ (BOOL)judgeCharacterInString:(NSString *)string {
    const char * strings = [string UTF8String];
    for (int i = 0; i < sizeof(strings); i++) {
        //只能为字母、下划线、数字
        if (!((*strings >= 65 && *strings <= 90)||(*strings >= 97 && *strings <= 122)||(*strings == 95)||(*strings >= 48 && *strings <=57))) {
            return NO;
        }
    }
    
    //不能有空格
    NSRange range = [string rangeOfString:@" "];
    if (range.length != 0) {
        return NO;
    }
    
    return YES;
}

//判断字符串长度
+ (BOOL)judgePasswordLength:(NSString *)string
{
    NSRange range = [string rangeOfString:string];
    if (range.length < 6 || range.length > 20) {
        return NO;
    }
    
    return YES;
}



+ (BOOL)isMobileNumber:(NSString *)mobileNumString {
    /**
     * 手机号码
     * 移动：134[0-8],135,136,137,138,139,150,151,157,158,159,182,187,188
     * 联通：130,131,132,152,155,156,185,186
     * 电信：133,1349,153,180,189
     */
    //    NSString *MOBILEString = @"^1(3[0-9]|5[0-35-9]|8[025-9])\\d{8}$";
    NSString *MOBILEString = @"^1([3-9][0-9])\\d{8}$";
    
    /**
     * 中国移动：China Mobile
     * 134[0-8],135,136,137,138,139,150,151,157,158,159,182,187,188
     */
    
    NSString *CMString = @"^1(34[0-8]|(3[5-9]|5[017-9]|8[278])\\d)\\d{7}$";
    
    /**
     * 中国联通：China Unicom
     * 130,131,132,152,155,156,185,186
     */
    
    NSString * CUString = @"^1(3[0-2]|5[256]|8[56])\\d{8}$";
    
    /**
     * 中国电信：China Telecom
     * 133,1349,153,180,189
     */
    
    NSString * CTString = @"^1((33|53|8[09])[0-9]|349)\\d{7}$";
    
    
    /**
     * 大陆地区固话及小灵通
     * 区号：010,020,021,022,023,024,025,027,028,029
     * 号码：七位或八位
     */
    
    // NSString * PHSString = @"^0(10|2[0-5789]|\\d{3})\\d{7,8}$";
    
    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", MOBILEString];
    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CMString];
    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CUString];
    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CTString];
    
    if (([regextestmobile evaluateWithObject:mobileNumString] == YES)
        || ([regextestcm evaluateWithObject:mobileNumString] == YES)
        || ([regextestct evaluateWithObject:mobileNumString] == YES)
        || ([regextestcu evaluateWithObject:mobileNumString] == YES)) {
        return YES;
    }
    else {
        return NO;
    }
}

+ (BOOL)isIDCardNumber:(NSString *)value {
    //检查 去掉两端的空格
    value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    
    //检查长度
    NSInteger length = 0;
    if (!value) {
        return NO;
    }else {
        length = value.length;
        
        if (length != 15 && length !=18) {
            return NO;
        }
    }
    // 省份代码
    NSArray *areasArray =@[@"11", @"12", @"13", @"14", @"15", @"21", @"22", @"23", @"31", @"32", @"33", @"34", @"35", @"36", @"37", @"41", @"42", @"43", @"44", @"45", @"46", @"50", @"51", @"52", @"53", @"54", @"61", @"62", @"63", @"64", @"65", @"71", @"81", @"82", @"91"];
    
    //检查省份代码
    NSString *valueStart2 = [value substringToIndex:2];
    BOOL areaFlag = NO;
    for (NSString *areaCode in areasArray) {
        if ([areaCode isEqualToString:valueStart2]) {
            areaFlag =YES;
            break;
        }
    }
    
    if (!areaFlag) {
        return false;
    }
    
    
    NSRegularExpression *regularExpression;
    NSUInteger numberofMatch;
    
    int year = 0;
    switch (length) {
        case 15:
            year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900;
            
            if (year % 4 ==0 || (year % 100 ==0 && year % 4 ==0)) {
                
                regularExpression = [[NSRegularExpression alloc] initWithPattern:@"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$"
                                                                         options:NSRegularExpressionCaseInsensitive
                                                                           error:nil];// 测试出生日期的合法性
            }else {
                regularExpression = [[NSRegularExpression alloc] initWithPattern:@"^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$"
                                                                         options:NSRegularExpressionCaseInsensitive
                                                                           error:nil];// 测试出生日期的合法性
            }
            numberofMatch = [regularExpression numberOfMatchesInString:value
                                                               options:NSMatchingReportProgress
                                                                 range:NSMakeRange(0, value.length)];
            
            if(numberofMatch > 0) {
                return YES;
            }else {
                return NO;
            }
        case 18:
            
            year = [value substringWithRange:NSMakeRange(6,4)].intValue;
            if (year % 4 ==0 || (year % 100 ==0 && year % 4 ==0)) {
                
                regularExpression = [[NSRegularExpression alloc] initWithPattern:@"^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$"
                                                                         options:NSRegularExpressionCaseInsensitive
                                                                           error:nil];// 测试出生日期的合法性
            }else {
                regularExpression = [[NSRegularExpression alloc] initWithPattern:@"^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$"
                                                                         options:NSRegularExpressionCaseInsensitive
                                                                           error:nil];// 测试出生日期的合法性
            }
            numberofMatch = [regularExpression numberOfMatchesInString:value
                                                               options:NSMatchingReportProgress
                                                                 range:NSMakeRange(0, value.length)];
            
            if(numberofMatch > 0) {
                int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3;
                int Y = S % 11;
                NSString *M = @"F";
                NSString *JYM = @"10X98765432";
                M = [JYM substringWithRange:NSMakeRange(Y,1)]; // 判断校验位
                if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) {
                    return YES;// 检测ID的校验位
                }else {
                    return NO;
                }
                
            }else {
                return NO;
            }
        default:
            return NO;
    }
}

+ (BOOL)isEmailValid:(NSString *)email {
    if (email == (id)[NSNull null] || email.length == 0) {
        return NO;
    }
    NSString *emailRegex = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}";
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return ([emailTest evaluateWithObject:email] == YES);
}

//账号昵称 黑名单
+ (BOOL)stringsRegexWith:(NSString *)string {
    NSMutableArray *arrayNick = [NSMutableArray arrayWithObjects:@"我操",@"我日你妈",@"mm",@"jj",@"bb",@"脱",@"拖",@"托",@"操你妈",@"你好难看呀",@"我想操你",@"我想干你",@"你中奖了",@"jb",@"sb",@"几吧",@"煞笔",@"www.",@"com.",@"@",@"http:/",@"baobei",@"admin",@"&",@"%",@"9158",@"就约我吧",@"我草",@"叼",@"卧槽",@"色情",@"情色",@"a片",@"毛片",@"女优",@"av",@"妓女",@"鸭子", nil];
    
    for (NSString *strNick in arrayNick) {
        if ([strNick isEqualToString:string]) {
            return NO;
        }
    }
    
    NSString *regex = @"系.*统|客.*服|公.*告|中.*奖|消.*息|官.*方|客.*服|运.*营|技.*术|巡.*管|代.*理|";
    NSPredicate *textPredicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",regex];
    if ([textPredicate evaluateWithObject:string]) {
        return NO;
    }
    
    return YES;
}

+ (BOOL)stringContainsEmoji:(NSString *)string {
    __block BOOL returnValue = NO;
    [string enumerateSubstringsInRange:NSMakeRange(0, [string length])
                               options:NSStringEnumerationByComposedCharacterSequences
                            usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
                                const unichar hs = [substring characterAtIndex:0];
                                if (0xd800 <= hs && hs <= 0xdbff) {
                                    if (substring.length > 1) {
                                        const unichar ls = [substring characterAtIndex:1];
                                        const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                                        if (0x1d000 <= uc && uc <= 0x1f77f) {
                                            returnValue = YES;
                                        }
                                    }
                                } else if (substring.length > 1) {
                                    const unichar ls = [substring characterAtIndex:1];
                                    if (ls == 0x20e3) {
                                        returnValue = YES;
                                    }
                                } else {
                                    if (0x2100 <= hs && hs <= 0x27ff) {
                                        returnValue = YES;
                                    } else if (0x2B05 <= hs && hs <= 0x2b07) {
                                        returnValue = YES;
                                    } else if (0x2934 <= hs && hs <= 0x2935) {
                                        returnValue = YES;
                                    } else if (0x3297 <= hs && hs <= 0x3299) {
                                        returnValue = YES;
                                    } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50) {
                                        returnValue = YES;
                                    }
                                }
                            }];
    return returnValue;
}

//字符串中是否包含英文字母
+(BOOL)isContainEnglishLetters:(NSString *)string{
    BOOL bflag = false;
    NSInteger length = [string length];
    for(NSInteger i = 0 ; i < length ; i++)
    {
        char num = [string characterAtIndex:i] ;
        if((num>='a'&&num<='z')||(num>='A'&&num<='Z'))
        {
            bflag = true;
            break;
        }
    }
    return bflag;
}


+ (void)showAlertViewWithTitle:(NSString *)title message:(NSString *)messag {
    UIAlertView *alert =[[UIAlertView alloc] initWithTitle:title
                                                   message:messag
                                                  delegate:self
                                         cancelButtonTitle:@"确定"
                                         otherButtonTitles:nil];
    [alert show];
}

// 启动菊花和文字
+ (void)startLoadIng:(NSString *)text {
    MBProgressHUD *HUD = (MBProgressHUD *)[[UIApplication sharedApplication].keyWindow viewWithTag:MBTAG];
    if (HUD == nil) {
        HUD = [[MBProgressHUD alloc] initWithWindow:[UIApplication sharedApplication].keyWindow];
        HUD.tag = MBTAG;
        [[UIApplication sharedApplication].keyWindow addSubview:HUD];
    }
    
    HUD.userInteractionEnabled = NO;
    HUD.mode = MBProgressHUDModeIndeterminate;
    HUD.labelText = text;
    HUD.labelFont = [UIFont fontWithName:@"HelveticaNeue" size:15.0f];
    [HUD show:YES];
}
// 启动菊花加载提示
+ (void)startLoadIng {
    [self startLoadIng:@""];
}
// 关闭菊花加载指示
+ (void)hideLoadIng {
    MBProgressHUD *HUD = (MBProgressHUD *)[[UIApplication sharedApplication].keyWindow viewWithTag:MBTAG];
    HUD.removeFromSuperViewOnHide = YES;
    if (HUD != nil) {
        [HUD hide:YES];
    }
}
// 成功提醒带图片 自动关闭
+ (void)showLoadSuceess:(NSString *)text {
    MBProgressHUD *HUD = (MBProgressHUD *)[[UIApplication sharedApplication].keyWindow viewWithTag:MBTAG];
    if (HUD == nil) {
        HUD = [[MBProgressHUD alloc] initWithWindow:[UIApplication sharedApplication].keyWindow];
        HUD.tag = MBTAG;
        [[UIApplication sharedApplication].keyWindow addSubview:HUD];
        [HUD show:YES];
    }
    
    HUD.removeFromSuperViewOnHide = YES;
    if ([self judgeStrIsEmpty:text]) {
        [HUD hide:YES];
    }else{
        HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"common_success"]];
        HUD.mode = MBProgressHUDModeCustomView;
        HUD.labelText = text;
        HUD.labelFont = [UIFont fontWithName:@"HelveticaNeue" size:15.0f];
        [HUD hide:YES afterDelay:1];
    }
}
// 失败提示带图片 自动关闭
+ (void)showLoadFailed:(NSString *)text {
    MBProgressHUD *HUD = (MBProgressHUD *)[[UIApplication sharedApplication].keyWindow viewWithTag:MBTAG];
    if (HUD == nil) {
        HUD = [[MBProgressHUD alloc] initWithWindow:[UIApplication sharedApplication].keyWindow];
        HUD.tag = MBTAG;
        [[UIApplication sharedApplication].keyWindow addSubview:HUD];
        [HUD show:YES];
    }
    HUD.removeFromSuperViewOnHide = YES;
    if ([self judgeStrIsEmpty:text]) {
        [HUD hide:YES];
    }else{
        HUD.customView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"common_failed"]];
//        HUD.customView.frame = CGRectMake(10, 10, 80, 80);
        HUD.mode = MBProgressHUDModeCustomView;
        HUD.minSize = CGSizeMake(120, 120);
        HUD.labelText = text;
        HUD.labelFont = [UIFont fontWithName:@"HelveticaNeue" size:15.0f];
        [HUD hide:YES afterDelay:1];
    }
}
// 普通信息提示  自动关闭
+ (void)showLoadInfo:(NSString *)text {
    MBProgressHUD *HUD = (MBProgressHUD *)[[UIApplication sharedApplication].keyWindow viewWithTag:MBTAG];
    if (HUD == nil) {
        HUD = [[MBProgressHUD alloc] initWithWindow:[UIApplication sharedApplication].keyWindow];
        HUD.tag = MBTAG;
        [[UIApplication sharedApplication].keyWindow addSubview:HUD];
        [HUD show:YES];
    }
    
    HUD.removeFromSuperViewOnHide = YES;
    if ([self judgeStrIsEmpty:text]) {
        [HUD hide:YES];
    }else{
        HUD.mode = MBProgressHUDModeText;
        HUD.labelText = text;
        HUD.labelFont = [UIFont fontWithName:@"HelveticaNeue" size:15.0f];
        [HUD hide:YES afterDelay:1];
    }
}

+ (NSMutableAttributedString *)handleText:(NSString *)originalStr
                               chanageStr:(NSString *)changeStr
                                 withFont:(UIFont *)font
                                textColor:(UIColor *)textColor
                              lineSpacing:(CGFloat)space{
    NSMutableAttributedString *textStr = [[NSMutableAttributedString alloc] initWithString:originalStr];
    
    NSRange range = [originalStr rangeOfString:changeStr];
    if (font != nil) {
        [textStr addAttribute:NSFontAttributeName value:font range:range];
    }
    if (textColor != nil) {
        [textStr addAttribute:NSForegroundColorAttributeName value:textColor range:range];
    }
    
    if (space > 0) {
        NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
        style.lineSpacing = space;//行距
        [textStr addAttribute:NSParagraphStyleAttributeName value:style range:NSMakeRange(0,originalStr.length)];
    }
    
    return textStr;
}

+ (NSMutableAttributedString *)handleText:(NSString *)originalStr
                              chanageStr1:(NSString *)changeStr1
                              chanageStr2:(NSString *)changeStr2
                                withFont1:(UIFont *)font1
                               textColor1:(UIColor *)textColor1
                                withFont2:(UIFont *)font2
                               textColor2:(UIColor *)textColor2{
    NSMutableAttributedString *textStr = [[NSMutableAttributedString alloc] initWithString:originalStr];
    
    NSRange range1 = [originalStr rangeOfString:changeStr1];
    if (font1 != nil) {
        [textStr addAttribute:NSFontAttributeName value:font1 range:range1];
    }
    if (textColor1 != nil) {
        [textStr addAttribute:NSForegroundColorAttributeName value:textColor1 range:range1];
    }
    
    NSRange range2 = [originalStr rangeOfString:changeStr2];
    if (font2 != nil) {
        [textStr addAttribute:NSFontAttributeName value:font2 range:range2];
    }
    if (textColor2 != nil) {
        [textStr addAttribute:NSForegroundColorAttributeName value:textColor2 range:range2];
    }
    
    return textStr;
}

+ (NetworkStatus)currentNetworkStatus
{
    HsReachability *internetReach = [HsReachability reachabilityForInternetConnection];
    NetworkStatus status = [internetReach currentReachabilityStatus];
    return status;
}

+ (NSString *)currentNetworkStatusString
{
    NSString *networkStat;
    switch ([self currentNetworkStatus]) {
        case ReachableViaWWAN:
            networkStat = @"WWAN";
            DLog(@"你现在使用网络环境为2G/3G/4G");
            break;
        case ReachableViaWiFi:
            networkStat = @"WIFI";
            DLog(@"你现在使用网络环境为WIFI");
            break;
        default:
            networkStat = @"UNKNOWN";
            break;
    }
    return networkStat;
}

// 判读用户是否开启了相册权限
+ (void)checkAuthorizatePhotoAlbum:(void(^)(BOOL success))block {
    if(IsIOSVersion8Earlier) {
        block([ALAssetsLibrary authorizationStatus] != ALAuthorizationStatusDenied);
    } else {
        [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
            dispatch_async(dispatch_get_main_queue(), ^{
                block(status != PHAuthorizationStatusDenied);
            });
        }];
    }
}

// 判读用户是否开启了相机权限，同时判断相册权限
+ (void)checkAuthorizateCamera:(void(^)(BOOL cameraAuthSuccess, BOOL albumAuthSuccess))block {
    [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
        dispatch_async(dispatch_get_main_queue(), ^{
            block([AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo] != AVAuthorizationStatusDenied, status != PHAuthorizationStatusDenied);
        });
    }];
}

+ (CGFloat)floatValueOfString:(NSString *)str {
    if([LIAppUtils judgeStrIsEmpty:str]) {
        return 0.0f;
    }
    return [str floatValue];
}

// url 加载图片
+ (void)loadImageInView:(id)view withUrl:(NSString *)url {
    if([view isKindOfClass:[UIImageView class]]) {
        UIImageView *imgView = (UIImageView *)view;
        [imgView sd_setImageWithURL:[NSURL URLWithString:url] placeholderImage:[LIAttributeConfig defaultAvaters]];
    } else if([view isKindOfClass:[UIButton class]]) {
        UIButton *btn = (UIButton *)view;
        [btn sd_setBackgroundImageWithURL:[NSURL URLWithString:url] forState:UIControlStateNormal placeholderImage:[LIAttributeConfig defaultAvaters]];
    }
}
@end
